# PHP_VERSION needs to be repeated here
# See https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG PHP_VERSION
FROM php:8.1-fpm-alpine AS php_assets

LABEL fly_launch_runtime="laravel"

RUN docker-php-ext-install pdo pdo_mysql sockets

COPY --from=composer:latest /usr/bin/composer /usr/local/bin/composer

COPY . /var/www/html

WORKDIR /var/www/html

# copy application code, skipping files based on .dockerignore

RUN composer install --optimize-autoloader \
    && mkdir -p storage/logs \
    && php artisan optimize:clear

# Multi-stage build: Build static assets
# This allows us to not include Node within the final container
FROM node:20 as node_assets

RUN mkdir /app

RUN mkdir -p  /app
WORKDIR /app
COPY . .
COPY --from=php_assets /var/www/html/vendor /app/vendor
RUN npm install && npm run build

# From our base container created above, we
# create our final image, adding in static
# assets that we generated above
FROM nginx:1.23.4-alpine

COPY .fly .fly
COPY ./fly.io/nginx ./local-nginx

RUN apk add rsync bash

COPY --from=php_assets /var/www/html /var/www/html

COPY --from=php_assets /usr/local/bin/php /usr/local/bin php

COPY bin bin

# Packages like Laravel Nova may have added assets to the public directory
# or maybe some custom assets were added manually! Either way, we merge
# in the assets we generated above rather than overwrite them
COPY --from=node_assets /app/public /var/www/html/public-npm
RUN rsync -ar /var/www/html/public-npm/ /var/www/html/public/ \
    && rm -rf /var/www/html/public-npm \
    && cp .fly/entrypoint.sh /entrypoint \
    && chmod +x /entrypoint \
    && rsync -ar ./local-nginx /etc/nginx

EXPOSE 8080

ENTRYPOINT ["/entrypoint"]
